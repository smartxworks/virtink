// Code generated by cloud-hypervisor-client-gen. DO NOT EDIT.

package cloudhypervisor

import (
    "bytes"
    "context"
    "encoding/json"
    "fmt"
    "io"
    "net"
    "net/http"
)

type Client struct {
    httpClient *http.Client
}

func NewClient(socketPath string) *Client {
    return &Client{
        httpClient: &http.Client{
            Transport: &http.Transport{
                DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
                    return net.Dial("unix", socketPath)
                },
                DisableKeepAlives: true,
            },
        },
    }
}

{{#endpoints}}
{{#desc}}// {{desc}}{{/desc}}
func (c *Client) {{name}}(ctx context.Context{{#arg}}, arg {{arg}}{{/arg}}) {{#ret}}({{ret}}, {{/ret}}error{{#ret}}){{/ret}} {
    {{#arg}}
    reqBody, err := json.Marshal(arg)
    if err != nil {
        return {{#ret}}nil, {{/ret}}fmt.Errorf("encode request: %s", err)
    }
    {{/arg}}

    req, err := http.NewRequestWithContext(ctx, "{{method}}", "http://localhost/api/v1{{path}}", {{#arg}}bytes.NewBuffer(reqBody){{/arg}}{{^arg}}nil{{/arg}})
    if err != nil {
        return {{#ret}}nil, {{/ret}}fmt.Errorf("build request: %s", err)
    }

    resp, err := c.httpClient.Do(req)
    if err != nil {
        return {{#ret}}nil, {{/ret}}fmt.Errorf("do request: %s", err)
    }
    defer resp.Body.Close()

    if resp.StatusCode >= 400 {
        body, _ := io.ReadAll(resp.Body)
        return {{#ret}}nil, {{/ret}}fmt.Errorf("request failed: %d %s: %s", resp.StatusCode, http.StatusText(resp.StatusCode), string(body))
    }

    {{#ret}}
    var ret {{ret}}
    if err := json.NewDecoder(resp.Body).Decode(&ret); err != nil {
        return {{#ret}}nil, {{/ret}}fmt.Errorf("decode response: %s", err)
    }
    {{/ret}}

    return {{#ret}}ret, {{/ret}}nil
}

{{/endpoints}}

{{#types}}
{{#desc}}// {{desc}}{{/desc}}
type {{name}} struct {
{{#fields}}
    {{name}} {{type}} `json:"{{key}}{{^required}},omitempty{{/required}}"`
{{/fields}}
}

{{/types}}
